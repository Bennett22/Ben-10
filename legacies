local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Bennett Scripts | The Supernatural Legacies", "GrapeTheme")

local Bennett = Window:NewTab("Powers")
local BennettSection = Bennett:NewSection("Vampire")

BennettSection:NewToggle("Feed", "Keybind (1)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "1" then
            local player = getPlayer()
            if player then

local args = {
    [1] = {
        [1] = {
            [1] = "\6",
            [2] = player.Character,
            [3] = "Feed"
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))


            end
        end
        end)
        end)

        BennettSection:NewToggle("Compell", "Keybind (2)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "2" then
            local player = getPlayer()
            if player then

local args = {
    [1] = {
        [1] = {
            [1] = "\6",
            [2] = player.Character,
            [3] = "Compel"
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))

            end
        end
        end)
        end)

                BennettSection:NewToggle("Heal", "Keybind (3)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "3" then
            local player = getPlayer()
            if player then

local args = {
    [1] = {
        [1] = {
            [1] = "\6",
            [2] = player.Character,
            [3] = "Vampire Heal"
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))

            end
        end
        end)
        end)

BennettSection:NewToggle("Heart Rip", "Keybind (4)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "4" then
            local player = getPlayer()
            if player then

local args = {
    [1] = {
        [1] = {
            [1] = "\6",
            [2] = player.Character,
            [3] = "Vampire Heart Rip"
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))

            end
        end
        end)
        end)

BennettSection:NewToggle("Choke", "Keybind (5)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "5" then
            local player = getPlayer()
            if player then

local args = {
    [1] = {
        [1] = {
            [1] = "\6",
            [2] = player.Character,
            [3] = "Choke",
            [4] = true
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))

            end
        end
        end)
        end)

BennettSection:NewButton("Stop Choking", " ", function()

local args = {
    [1] = {
        [1] = {
            [1] = "\6",
            [2] = "null",
            [3] = "Choke",
            [4] = false
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))

end)

BennettSection:NewToggle("Head Dive", "Keybind (6)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "6" then
            local player = getPlayer()
            if player then

local args = {
    [1] = {
        [1] = {
            [1] = "\6",
            [2] = player.Character,
            [3] = "Head dive",
            [4] = true
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))

            end
        end
        end)
        end)

BennettSection:NewButton("Stop Head Diving", " ", function()

local args = {
    [1] = {
        [1] = {
            [1] = "\6",
            [2] = "null",
            [3] = "Head dive",
            [4] = false
        },
        [2] = {
            [1] = "\6",
            [2] = workspace,
            [3] = "Head dive",
            [4] = true
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))

end)

BennettSection:NewToggle("Head Slice", "Keybind (7)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "7" then
            local player = getPlayer()
            if player then

local args = {
    [1] = {
        [1] = {
            [1] = "\6",
            [2] = player.Character,
            [3] = "Head Slice"
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))

            end
        end
        end)
        end)

        BennettSection:NewToggle("Neck Snap", "Keybind (8)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "8" then
            local player = getPlayer()
            if player then

local args = {
    [1] = {
        [1] = {
            [1] = "\6",
            [2] = player.Character,
            [3] = "Neck Snap"
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))

            end
        end
        end)
        end)

                BennettSection:NewToggle("Limb Rip", "Keybind (9)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "9" then
            local player = getPlayer()
            if player then

local args = {
    [1] = {
        [1] = {
            [1] = "\6",
            [2] = player.Character,
            [3] = "Limb Rip"
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))

            end
        end
        end)
        end)

                        BennettSection:NewToggle("Vampire Combo", "Keybind (-)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "-" then
            local player = getPlayer()
            if player then

local args = {
    [1] = {
        [1] = {
            [1] = "\6",
            [2] = player.Character,
            [3] = "Vampire Combo"
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))

            end
        end
        end)
        end)

local BennettSection = Bennett:NewSection("Witch")

BennettSection:NewButton("Crash the server", "", function()
    print("Clicked")
    local Plr = game.Players.LocalPlayer
    for i, Player in pairs (game.Players:GetPlayers()) do

        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 100000 then
                local Target = Player.Character or Player.CharacterAdded:Wait()

local args = {
    [1] = {
        [1] = {
            [1] = "\6",
            [2] = Target,
            [3] = "Crescere abor"
        },
        [2] = {
            [1] = "\4",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = game:GetService("SoundService"):WaitForChild("NormalCast")
        },
        [3] = {
            [1] = "\4",
            [2] = Target,
            [3] = game:GetService("SoundService"):WaitForChild("NormalCast")
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
 

 wait(3)

local args = {
    [1] = {
        [1] = {
            [1] = "\6",
            [2] = Target,
            [3] = "Incendia"
        },
        [2] = {
            [1] = "\4",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = game:GetService("SoundService"):WaitForChild("NormalCast")
        },
        [3] = {
            [1] = "\4",
            [2] = Target,
            [3] = game:GetService("SoundService"):WaitForChild("NormalCast")
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
 
 wait(3)

 local args = {
    [1] = {
        [1] = {
            [1] = "\6",
            [2] = Target,
            [3] = "Confractus ab intus"
        },
        [2] = {
            [1] = "\4",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = game:GetService("SoundService"):WaitForChild("NormalCast")
        },
        [3] = {
            [1] = "\4",
            [2] = Target,
            [3] = game:GetService("SoundService"):WaitForChild("NormalCast")
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
 
  wait(3)

 local args = {
    [1] = {
        [1] = {
            [1] = "\6",
            [2] = Target,
            [3] = "Errox Femus"
        },
        [2] = {
            [1] = "\4",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = game:GetService("SoundService"):WaitForChild("NormalCast")
        },
        [3] = {
            [1] = "\4",
            [2] = Target,
            [3] = game:GetService("SoundService"):WaitForChild("NormalCast")
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
 

            end
        end
end   
end)

